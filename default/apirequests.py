import asyncio
import os
import random
from openai import OpenAI
from default.music import getUserLikedTracks
import lyricsgenius
from dotenv import load_dotenv
import re

load_dotenv()

genius = lyricsgenius.Genius(os.getenv("GENIUS_TOKEN"))
openai_client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv("APIKEY"),
)


async def fetch_lyrics(track, artist):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞."""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        song = await asyncio.to_thread(genius.search_song, track, artist)
        return (track, artist, song.lyrics if song else "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è {track}: {e}")
        return (track, artist, "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def get_random_tracks_with_lyrics(user_id, count=15):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ç—Ä–µ–∫–∏ —Å —Ç–µ–∫—Å—Ç–∞–º–∏."""
    liked_tracks = getUserLikedTracks(user_id)
    random.shuffle(liked_tracks)
    selected_tracks = liked_tracks[:count]

    tasks = [fetch_lyrics(track, artist) for track, artist in selected_tracks]
    tracks_with_lyrics = await asyncio.gather(*tasks)

    return tracks_with_lyrics

def analyze_tracks(tracks):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫–∏ –∏ —Ç–µ–∫—Å—Ç—ã –≤ OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
    tracks_str = "\n\n".join(
        f"üéµ {track} ‚Äî {artist}\n–¢–µ–∫—Å—Ç:\n{lyrics}"
        for track, artist, lyrics in tracks
    )

    response = openai_client.chat.completions.create(
        model="meta-llama/llama-4-scout:free",
        messages=[
            {
                "role": "system",
                "content": "–¢—ã ‚Äî –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. "
                           "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–∏—á–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –ª—é–±–∏–º—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏ –∏—Ö —Ç–µ–∫—Å—Ç–æ–≤."
            },
            {
                "role": "user",
                "content": (
                    "–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∏ –ª—é–±–∏–º—ã–µ —Ç—Ä–µ–∫–∏ —Å —Ç–µ–∫—Å—Ç–∞–º–∏:\n\n"
                    f"{tracks_str}\n\n"
                    "–ù–∞–ø–∏—à–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π). "
                    "–£—á–∏—Ç—ã–≤–∞–π —ç–º–æ—Ü–∏–∏, —Ç–µ–º—ã, —Å—Ç–∏–ª—å –º—É–∑—ã–∫–∏ –∏ —Å–ª–æ–≤–∞. "
                    "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                )
            }
        ]
    )

    print(response)

    # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
    raw_analysis = response.choices[0].message.content.strip()

    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã –ø–æ –¥–≤—É–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫–∏ (\n\n)
    paragraphs = re.split(r'\n\s*\n', raw_analysis)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–±–∑–∞—Ü–µ–≤
    return paragraphs


def generate_analysis(tracks_data):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–æ–≤ —á–µ—Ä–µ–∑ OpenAI API
    :param tracks_data: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç—Ä–µ–∫, –∞—Ä—Ç–∏—Å—Ç, —Ç–µ–∫—Å—Ç)
    :return: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
    """
    stream = openai_client.chat.completions.create(
        model="tngtech/deepseek-r1t-chimera:free",
        messages=[
            {
                "role": "user",
                "content": "–¢—ã ‚Äî –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. "
                          "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ—é –ª–∏—á–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏ –∏—Ö —Ç–µ–∫—Å—Ç–æ–≤."
            },
            {
                "role": "user",
                "content": (
                    "–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∏ –ª—é–±–∏–º—ã–µ —Ç—Ä–µ–∫–∏ —Å —Ç–µ–∫—Å—Ç–∞–º–∏:\n\n" +
                    "\n\n".join(
                        f"üéµ {track} ‚Äî {artist}\n–¢–µ–∫—Å—Ç:\n{lyrics}"
                        for track, artist, lyrics in tracks_data
                    ) +
                    "\n\n–ù–∞–ø–∏—à–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ (5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)."
                    "–ï—Å–ª–∏ —Å–º–æ–∂–µ—à—å - —Ç–æ –ø–æ–∏—â–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø–æ —ç—Ç–∏–º —Ç—Ä–µ–∫–∞–º."
                    "–£—á–∏—Ç—ã–≤–∞–π —ç–º–æ—Ü–∏–∏, —Ç–µ–º—ã, —Å—Ç–∏–ª—å –º—É–∑—ã–∫–∏ –∏ —Å–ª–æ–≤–∞."
                    "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                )
            }
        ],
        stream=True
    )

    for chunk in stream:
        content = chunk.choices[0].delta.content
        if content:
            yield content